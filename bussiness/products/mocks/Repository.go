// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	products "outlet/v1/bussiness/products"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id, product
func (_m *Repository) Delete(id int, product *products.Domain) (*products.Domain, error) {
	ret := _m.Called(id, product)

	var r0 *products.Domain
	if rf, ok := ret.Get(0).(func(int, *products.Domain) *products.Domain); ok {
		r0 = rf(id, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *products.Domain) error); ok {
		r1 = rf(id, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id int) (*products.Domain, error) {
	ret := _m.Called(id)

	var r0 *products.Domain
	if rf, ok := ret.Get(0).(func(int) *products.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProduct provides a mock function with given fields:
func (_m *Repository) GetAllProduct() (*[]products.Domain, error) {
	ret := _m.Called()

	var r0 *[]products.Domain
	if rf, ok := ret.Get(0).(func() *[]products.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: product
func (_m *Repository) Insert(product *products.Domain) (*products.Domain, error) {
	ret := _m.Called(product)

	var r0 *products.Domain
	if rf, ok := ret.Get(0).(func(*products.Domain) *products.Domain); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.Domain) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, user
func (_m *Repository) Update(id int, user *products.Domain) (*products.Domain, error) {
	ret := _m.Called(id, user)

	var r0 *products.Domain
	if rf, ok := ret.Get(0).(func(int, *products.Domain) *products.Domain); ok {
		r0 = rf(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *products.Domain) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
