// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	orders "outlet/v1/bussiness/orders"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id, order
func (_m *Repository) Delete(id int, order *orders.Domain) (*orders.Domain, error) {
	ret := _m.Called(id, order)

	var r0 *orders.Domain
	if rf, ok := ret.Get(0).(func(int, *orders.Domain) *orders.Domain); ok {
		r0 = rf(id, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *orders.Domain) error); ok {
		r1 = rf(id, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id int) (*orders.Domain, error) {
	ret := _m.Called(id)

	var r0 *orders.Domain
	if rf, ok := ret.Get(0).(func(int) *orders.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrder provides a mock function with given fields:
func (_m *Repository) GetAllOrder() (*[]orders.Domain, error) {
	ret := _m.Called()

	var r0 *[]orders.Domain
	if rf, ok := ret.Get(0).(func() *[]orders.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]orders.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: order
func (_m *Repository) Insert(order *orders.Domain) (*orders.Domain, error) {
	ret := _m.Called(order)

	var r0 *orders.Domain
	if rf, ok := ret.Get(0).(func(*orders.Domain) *orders.Domain); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*orders.Domain) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
