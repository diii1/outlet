// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	paymentMethods "outlet/v1/bussiness/paymentMethods"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddPaymentMethod provides a mock function with given fields: paymentMethod
func (_m *Service) AddPaymentMethod(paymentMethod *paymentMethods.Domain) (*paymentMethods.Domain, error) {
	ret := _m.Called(paymentMethod)

	var r0 *paymentMethods.Domain
	if rf, ok := ret.Get(0).(func(*paymentMethods.Domain) *paymentMethods.Domain); ok {
		r0 = rf(paymentMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paymentMethods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*paymentMethods.Domain) error); ok {
		r1 = rf(paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentMethod provides a mock function with given fields: id, paymentMethod
func (_m *Service) DeletePaymentMethod(id int, paymentMethod *paymentMethods.Domain) (*paymentMethods.Domain, error) {
	ret := _m.Called(id, paymentMethod)

	var r0 *paymentMethods.Domain
	if rf, ok := ret.Get(0).(func(int, *paymentMethods.Domain) *paymentMethods.Domain); ok {
		r0 = rf(id, paymentMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paymentMethods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *paymentMethods.Domain) error); ok {
		r1 = rf(id, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Service) FindByID(id int) (*paymentMethods.Domain, error) {
	ret := _m.Called(id)

	var r0 *paymentMethods.Domain
	if rf, ok := ret.Get(0).(func(int) *paymentMethods.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paymentMethods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPaymentMethod provides a mock function with given fields:
func (_m *Service) GetAllPaymentMethod() (*[]paymentMethods.Domain, error) {
	ret := _m.Called()

	var r0 *[]paymentMethods.Domain
	if rf, ok := ret.Get(0).(func() *[]paymentMethods.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]paymentMethods.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
